def host = args[0]
def db = args[1]
def user = args[2]
def passwd = args[3]

def parseResultSet(def rs) {
	def list = []
	try {
		while(rs.next()) {
			list << rs.toRowResult()
		}
	} finally {
		rs?.close()
	}
	return list
}

// List Of GroovyRowResult
def getTablesOfSchema(meta, schema) {
	// "TABLE", "VIEW", "SYSTEM TABLE", "GLOBAL TEMPORARY", "LOCAL TEMPORARY", "ALIAS", "SYNONYM"
	def types = ['TABLE'] as String[]
	return parseResultSet(meta.getTables(null, schema, '%', types))
}

def result = [:]

_oracle(host, db, user, passwd) {sql->
	def meta = sql.connection.metaData
	def schema = meta.userName
	
	getTablesOfSchema(meta, schema).each {
		def pName = it.TABLE_NAME
		if(pName =~ '\\$') {
			// システムテーブル無視
			return
		}
		def keys = []
		def cols = []
		def pkNames = parseResultSet(meta.getPrimaryKeys(null, schema, pName)).collect {
			it.COLUMN_NAME
		}
		parseResultSet(meta.getColumns(null, schema, pName, '%')).each {col->
			def c = [:]
			c.defaultValue = col.COLUMN_DEF ?: ''
			c.desc = col.REMARKS ?: ''
			c.lName = col.REMARKS ?: ''
			c.nullable = col.IS_NULLABLE == "YES"
			c.pName = col.COLUMN_NAME
			c.size = (col.COLUMN_SIZE?.toString()) ?: ''
			c.type = col.TYPE_NAME
			if(c.pName in pkNames) {
				c.key = true
				keys << c
			} else {
				c.key = false
			}
			cols << c
		}
		def table = [:]
		table.pName = pName
		table.cols = cols
		table.keys = keys
		result.put(table.pName, table)
	}
}

return result